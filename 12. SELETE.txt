1. Syntax
  1) SELECT [DISTINCT] { * | <coulumn_name>,[AS ] 별칭, ....} 5
     FROM 테이블 이름(들) [AS 테이블 이름 별칭]               1
     [WHERE 검색 조건(들)]                                    2
     [GROUP BY 속성 이름]                                     3
     [HAVING 검색 조건(들)]                                   4
     [ORDER BY 속성 이름[ASC | DESC]]                         6

     - ALL : 튜플의 중복을 허용하도록 지정
     - DISTINCT : 튜플의 중복을 허용하지 않도록 지정한다.
      - 중복을 제거한 유일 집합을 추출
      - 컬럼 2개 조회
        -
     
     - AS 키워드를 이용해 결과 테이블에서 속성의 이름을 바꾸어 출력. AS 키워드 생략 가능
     - AS 키워드 생략 가능
     
     - 앨리어스를 사용해서 테이블 및 컬럼(표현식)에 대한 이름(별칭)을 지정할 수 있다.
     - 앨리어스에 공백이 있을 경우 ""로 감쌀 수 있다.
     - 앨리어스명으로 한글로 줄 수도 있음
     - 앨리어스 사용시 "AS" 생략 가능 
     
     
     - 산술식을 이용해 검색
      - 산술식 : 속성의 이름과 +, -, *, / 등의 산술 연산자와 상수로 구성한다.
        - 비교 연산자 : =, <>(다르다), <, >, <=, >=
        - 논리 연산자 : AND, OR, NOT

    - WHERE절
      - 조건을 주어 특정 조건에 부합하는 결과 집합(행)만을 추출한다.
        = ">" 연산자
      - BETWEEN 연산자
        - 값의 범위에 대한 조건에 부합하는 결과 집합(행)을 리턴한다.
      - NOt BETWEEN 연산자
      - IN 연산자 = OR
        - 특정 목록과 일치하는 값이 있으면 결과 집합으로 리턴한다.
      - NOT IN 연산자
        - "<>" 연산자 + and 조건
    
    - ORDER By 절
      - 1개 컬럼 - ASC (오름차순) 정렬
      - 2개 컬럼 - DESC (내림차순) + ASC(오름차순) 정렬
      - 컬럼 앨리어스를 기재하여 정렬
      - SELETE절 컬럼 기재 순서(순번)을 기재하여 정렬
      - nulls first, nulls last

    - LIMIT 절
      - SELECT 문에서 반횐 되는 결과 집합의 행의 건 수를 제한한다.
    - LIMIT ~ OFFSET 사용
      - OFFSET : 출력하는 시작 행 (0부터 시작한다.)
    
    - FETCH 절
      - SELECT 문에서 반환되는 결과 집합의 행의 건 수를 제한한다.
    
    - LIMIT vs FETCH
      - 기능적으로 동일하다.
      - LIMIT는 국제 표준은 아니고, FETCH는 SQL 국제 표준이다.
    
    - LIKE 연산자
      - 특정 패턴과 일치하는 조건으로 데이터를 조회한다.
      - 와일드 카드 %, _과 함께 사용
      - %
        - 무엇이 나오든지 나오지 않던지 상관하지 않는다.
        - 와일드카드 %를 앞 뒤에 사용한다. ('%JEN%')
          - 값이 어떤 걸로 시작해서 어떤 걸로 끝나든지 간에 오로지 JEN만 존재하면 리턴한다. 
      - _(언더 바)
        - 무엇이든 한자리의 문자를 의미한다.
        - ___(3개) : 무엇이든 세자리만 있으면 리턴함
      - _% (언더 바 퍼센트)
        - Jen___%
          - Jen 시작하면서 총 6자리 이상인 모든 행을 리턴한다.
    
    - NULL 비교
      - is null 연산자
      - is not null 연산자
    
    - CASE 문
      - IF 문과 같은 분기 처리에 의한 SQL 문 작성이 가능하다.
    - CASE 문 (ORDER BY)
    
    - 그룹별 검색
      - 특성 속성의 값이 같은 튜플을 모아 그룹을 만들고, 그룹별로 검색
      - HAVING 키워드를 함께 이용해 그룹에 대한 조건을 작성
      - SELECT절에 등장한 컬럼은 GROUP BY에 모두 명시해야 한다.
        - 집계함수 제외
    = where 절과 HAVING 절의 차이
      - where : "집계 전 데이터를 필터링
        - where절에는 집계함수가 올 수 없다.
      - having : "집게 후 데이터를 필터링
        - having 절에는 집계함수만 올 수 있다
2. null을 이용한 검색
  1) null은 empty가 아닌 unkown
  2) is null 키워드를 이용해 특정 속성의 값이 널 값인지를 비교
     is not null 키워드를 이용해 특정 속성의 값이 널 값이 아닌지를 비교
  3) null 값과 산술 연산 및 비교 연산
      - 결과는 null
        - ex) 5 + null returns null
              null > 5 returns null
              null = null returns null
    

3. NULL 관련 함수
  1) NULLIF 함수
    - NULL 처리 할 수 있다.
  2) COALESCE 함수

4. CAST 연산자
  1) 데이터 타입(유형)을 변환
  2) 문자열을 INTERVAL 형으로 형변환
    - 시간 계산에 활용할 수 있다.

5. 문자열 함수

6. 날짜 관련 함수
  1) 날짜와 시간을 다루는 함수
  2) 날짜와 시간 추출 함수
  3) 문자열을 날짜 및 시간형으로 형변환하는 함수
7. 수학 관련 함수
  1) 반올림, 올림, 내림, 지름 관련 함수
  2) 연산 관련 함수
  3) 집계 함수
    - 개수, 합계, 평균, 최대값, 최소값
    - SELETE절이나 HAVING절에서만 사용 가능하다.
    - WHERE절에서는 사용불가
    - count() : 레코드 개수 리턴
      max() : 컬럼값의 최대값을 리턴
      min() : 컬럼값의 최소값을 리턴
      sum() : 컬럼값의 합을 리턴
      avg() : 컬럼값의 평균을 리턴
