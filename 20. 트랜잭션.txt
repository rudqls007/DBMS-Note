1. 트랜잭션(Transaction)
    1) DBMS에서 상효 작용의 한 단위.
        - 더 이상 나눌 수 없는 작업의 단위
        - INSERT, UPDATE, SELECT, DELETE가 각 하나의 트랜잭션이다.
    2) 데이터베이스 내에 읽거나 쓰는 여러 개 쿼리를 요구한다.
    3) 예를 들면, 이체를 할 때 한 계좌에서 인출되면 다른 계좌에서 입금이 확인되는 것이 중요하다.
        - 출금(UPDATE) -> 돈 -> 입금(UPDATE)이 하나의 Tx로 묶여야 된다.
    3) 만약 쿼리 하나가 실패하면, DBMS는 전체 트랜잭션 또는 실패한 쿼리를 롤백한다.
        - 개발 방식에 따라 다르다.
          - 모 아니면 도 (둘 다 성곡하던가, 하나만 실패해도 취소)
        - 트랜잭션은 Commit 전에 언제든지 수동으로 Rollback 될 수 있다.
    4) AOP와 비슷하다.

2. 트랜잭션의 4대 특징 (ACID)
    1) 원자성 (Atomicity)
        - 데이터 조작이 전부 성곡 혹은 실패할 지 보증하는 구조이다.
        - COMMIT : 조작 과정에 문제 없으면 처리 확정
                   작업 내용을 DB에 영구적으로 저장한다.
        - ROLLBACK : 조작 중간에 문제 발생 시 마지막 커밋으로 복귀한다.
                     최근 변경사항을 취소한다.
    2) 일관성 (Consistency)
        - 데이터 조작 전 후에 일관성 유지 필요
          - Tx 수행 전과 후가 일관된 상태를 유지해야 한다.
        - 예) 회원 가입 시 등록 번호에 유일성 제약 설정
    3) 고립성 (Isolation, 격리성)
        - 각 Tx는 독립적으로 수행되어야 한다.
        - 복수 사용자가 동시에 데이터 조작 실행할 경우 각각의 처리가 모순 없이 실행되는 것을 보증한다.
        - 데이터베이스 오브젝트에 대해 잠금을 걸어 후속 처리 차단
            - Isolation Level 너무 높으면 다른 작업을 하는 사람은 기다려야한다.
        - 직렬화 가능 기능(직렬 상태로 복수 트랜잭션 순서대로 처리)
            - DBMS 내에서 트랜잭션 격리 수준 설정으로 구현한다.
    4) 지속성(Durability)
        - 성공한 Tx의 결과는 유지되어야 한다.
        - 데이터 조직 완료 후 완료 통지 받는 시점에서 결과 잃지 않는 것
        - 트랜잭션이 Commit 되고 나면 데이터 변경 사항이 영구적으로 확정되도록 보장하는 것이다.